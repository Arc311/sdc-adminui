#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var browserify = require('browserify');
var shim = require('browserify-shim');
var glob = require('glob');
var format = require('util').format;
var join = path.join;

var uglify = require('uglify-js');


var root = path.resolve(__dirname, '..', 'public', 'js');


var shimConfig = {
    'jquery': { path: './lib/jquery', exports: '$' },
    'jquery.serializeObject': {
        path: './lib/jquery.serializeObject',
        depends: {'jquery': '$'},
        exports: null
    },
    'jquery.autosize': {
        path: './lib/jquery.autosize',
        depends: {'jquery': '$'},
        exports: null
    },
    'jquery.chosen': {
        path: './lib/chosen.jquery',
        depends: { 'jquery': '$' },
        exports: null
    },
    'bootstrap': { path: './lib/bootstrap', exports: null },
    'bootstrap.datetimepicker' : {
        path : './lib/bootstrap-datetimepicker.js',
        depends: {
            'jquery': 'jQuery',
            'moment': 'moment'
        },
        exports: null
    },
    'd3': {
        path: './lib/d3.v3',
        exports: 'd3'
    },
    'showdown': {
        path: './lib/showdown',
        exports: 'Showdown'
    },
    'rickshaw': {
        path: './lib/rickshaw',
        depends: {'d3': 'd3'},
        exports: null
    },
    'react-chosen': {
        path: './lib/react-chosen',
        depends: {
            'react': 'React'
        },
        exports: 'Chosen'
    },
    'bootstrap.tags': {
        path: './lib/bootstrap-tags',
        depends: {'jquery': '$'},
        exports: null
    },
    'typeahead': { path: './lib/typeahead.jquery', exports: null },
    'bloodhound': { path: './lib/bloodhound', exports: 'Bloodhound'},
    'backbone.marionette': {
        path: './lib/backbone.marionette',
        exports: null,
        depends: {
            'jquery': '$',
            'underscore': '_',
            'backbone': 'Backbone'
        }
    },
    'backbone.modelbinder': { path: './lib/Backbone.ModelBinder', exports: null },

    'backbone.syphon': {
        path: './lib/backbone.syphon',
        exports: null,
        depends: {
            'backbone': 'Backbone',
            'underscore': '_'
        }
    },
    'backbone.stickit': {
        path: './lib/backbone.stickit',
        exports: null,
        depends: {
            'backbone': 'Backbone',
            'underscore': '_'
        }
    },
    'raphael': {
        path: './lib/raphael-min',
        exports: 'Raphael'
    },
};

Object.keys(shimConfig).forEach(function(k) {
    if (shimConfig[k].path) {
        shimConfig[k].path = path.join(root, shimConfig[k].path);
    }
});

var b = shim(browserify({
    extensions: ['jsx']
}), shimConfig)
    .transform(require.resolve(join(root, './transforms/tpl')))
    .transform(require('reactify'))
    .require('superagent', { expose: 'superagent' })
    .require(require.resolve(join(root, './lib/moment.min')), { expose: 'moment'})
    .require(require.resolve(join(root, './request')), { expose: 'adminui-api' })
    .require(require.resolve(join(root, './lib/showdown')), { expose: 'showdown' })
    .require(require.resolve(join(root, './adminui')), {expose: 'adminui', entry: true});

b.external(require.resolve(join(root, './lib/jquery')) + ':jquery');
b.external(require.resolve(join(root, './lib/moment.min')) + ':moment');
b.external('underscore');
b.external('underscore.string');
b.external('react');
b.external('backbone');
b.external('superagent');

var blibs = browserify();
blibs.require('react');
blibs.require('underscore');
blibs.require('underscore.string');
blibs.require('backbone');
blibs.require('superagent');
blibs.require(require.resolve(join(root, './lib/jquery')), { expose: 'jquery'});
blibs.require(require.resolve(join(root, './lib/moment.min')), {expose: 'moment'});

['*.js', 'components/*.jsx', 'views/*.js', 'models/*.js'].forEach(function(p) {
    glob(join(p), {cwd: root}, function(err, files) {
        files.forEach(function(f) {
            var exposeAs = './' + f.substr(0, f.lastIndexOf('.'));
            b.require(require.resolve(join(root, f)), {expose: exposeAs});
        });
    });
});


var t = new Date().getTime();
var outputPath = path.join(root, '..', 'app.js');
var tmpPath = format('%s.%s', outputPath, t);

var libsOutputPath = path.join(root, '..', 'libs.js');
var libsTmpPath = format('%s.%s', libsOutputPath, t);

console.log('Generating bundle [app.js]');
b.bundle({debug:true}, function(err, src) {
    if (err) {
        console.error(err);
        process.exit(1);
    }
    var res = src;
    if (!process.env['SKIP_MINIFY']) {
        console.log("Minifying output");
        res = uglify.minify(src, {fromString: true}).code;
    }

    console.log("Writing bundle file");
    fs.writeFileSync(tmpPath, res);
    fs.renameSync(tmpPath, outputPath);

    console.log('Build succeeded: ', outputPath);
});

console.log('Generating bundle [libs.js]');
blibs.bundle({debug: true}, function(err, src) {
    if (err) {
        console.error(err);
        process.exit(1);
    }
    var res = src;
    if (!process.env['SKIP_MINIFY']) {
        console.log("Minifying output");
        res = uglify.minify(src, {fromString: true}).code;
    }

    console.log("Writing bundle file");
    fs.writeFileSync(libsTmpPath, res);
    fs.renameSync(libsTmpPath, libsOutputPath);

    console.log('Build succeeded: ', libsOutputPath);

});
