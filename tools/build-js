#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var browserify = require('browserify');
var shim = require('browserify-shim');
var glob = require('glob');
var format = require('util').format;
var join = path.join;


var root = path.resolve(__dirname, '..', 'public', 'js');


var shimConfig = {
    'jquery': { path: './lib/jquery', exports: '$' },
    'jquery.serializeObject': {
        path: './lib/jquery.serializeObject',
        depends: {
            'jquery': '$'
        },
        exports: null
    },
    'jquery.chosen': { path: '/lib/chosen.jquery', exports: null },
    'bootstrap': { path: './lib/bootstrap', exports: null },
    'typeahead': { path: './lib/typeahead', exports: null },
    'knockback': {
        path: './lib/knockback',
        exports: null,
        depends: {'knockout': 'ko'}
    },
    'knockout': {
        path: './lib/knockout-min',
        exports: 'ko',
        depends: {'underscore': '_', 'jquery': '$'}
    },
    'backbone': {
        path: './lib/backbone',
        exports: null,
        depends: {
            'jquery': '$',
            'underscore': '_'
        }
    },
    'backbone.marionette': {
        path: './lib/backbone.marionette',
        exports: null,
        depends: {
            'jquery': '$',
            'underscore': '_',
            'backbone': 'Backbone'
        }
    },
    'backbone.modelbinder': { path: './lib/Backbone.ModelBinder', exports: null },
    'backbone.stickit': {
        path: './lib/backbone.stickit',
        exports: null,
        depends: {
            'backbone': 'Backbone',
            'underscore': '_'
        }
    }
};

Object.keys(shimConfig).forEach(function(k) {
    if (shimConfig[k].path) {
        shimConfig[k].path = path.join(root, shimConfig[k].path);
    }
});

var b = shim(browserify(), shimConfig)
    .transform(require.resolve(join(root, './transforms/tpl')))
    .require('underscore', { expose: 'underscore' })
    .require('underscore.string', { expose: 'underscore.string' })
    .require(require.resolve(join(root, './lib/jquery')), { expose: 'jquery' })
    .require(require.resolve(join(root, './lib/moment.min')), { expose: 'moment' })
    .require(require.resolve(join(root, './adminui')), {expose: 'adminui'})

glob(join('**/*.js'), {cwd: root}, function(err, files) {
    files.forEach(function(f) {
        var exposeAs = './' + f.substr(0, f.lastIndexOf('.'));
        b.require(require.resolve(join(root, f)), {expose: exposeAs});
    });
});

var t = new Date().getTime();
var outputPath = path.join(root, '..', 'âœš.js');
var tmpPath = format('%s.%s', outputPath, t);


b.bundle({debug:true}, function(err, src) {
    if (err) {
        console.error(err);
        process.exit(1);
    }
    fs.writeFileSync(tmpPath, src);
    fs.renameSync(tmpPath, outputPath);
    console.log('Build succeeded: ', outputPath);
    process.exit(0);
});
